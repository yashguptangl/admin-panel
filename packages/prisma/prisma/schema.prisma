generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              Int          @id @default(autoincrement())
  username        String
  email           String
  mobile          String       @unique
  password        String
  otp             Int
  isPhoneVerified Boolean      @default(false)
  contactLogs     ContactLog[]
  wishlists       Wishlist[]
}

model Owner {
  id                   Int                   @id @default(autoincrement())
  username             String
  email                String
  mobile               String                @unique
  password             String
  otp                  Int
  isPhoneVerified      Boolean               @default(false)
  points               Int                   @default(10)
  isKYCVerified        Boolean               @default(false)
  contactLogs          ContactLog[]
  FlatInfo             FlatInfo[]
  PgInfo               PgInfo[]
  RoomInfo             RoomInfo[]
  verificationRequests VerificationRequest[]
}

model Agent {
  id                   Int                   @id @default(autoincrement())
  username             String
  email                String                @unique
  mobile               String                @unique
  password             String
  otp                  Int
  isPhoneVerified      Boolean               @default(false)
  agentId              String                @unique
  isKYCVerified        Boolean               @default(false)
  isVerifiedByAdmin    Boolean               @default(false)
  Agentprogress        Agentprogress?
  VerificationRequests VerificationRequest[]
}

model Agentprogress {
  id        Int      @id @default(autoincrement())
  agentId   String   @unique
  step      String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agent     Agent    @relation(fields: [agentId], references: [agentId])
}

model FlatInfo {
  id                  Int      @id @default(autoincrement())
  ownerId             Int
  Type                String   @default("Flat")
  city                String
  townSector          String
  location            String
  landmark            String
  BHK                 String
  MaxPrice            String
  MinPrice            String
  Offer               String
  security            String
  maintenance         String
  totalFlat           Int
  Adress              String
  ageofProperty       String
  waterSupply         String
  powerBackup         String
  noticePeriod        String
  furnishingType      String
  accomoType          String
  parking             String[]
  preferTenants       String[]
  petsAllowed         Boolean
  genderPrefer        String
  flatType            String
  careTaker           String
  listingShowNo       String
  flatInside          String[]
  flatOutside         String[]
  isVerified          Boolean  @default(false)
  verificationPending Boolean  @default(true)
  paymentDone         Boolean  @default(false)
  isVisible           Boolean  @default(true)
  owner               Owner    @relation(fields: [ownerId], references: [id])
}

model PgInfo {
  id                  Int      @id @default(autoincrement())
  ownerId             Int
  Type                String   @default("Pg")
  city                String
  townSector          String
  location            String
  landmark            String
  BHK                 String
  MinPrice            String
  MaxPrice            String
  adress              String
  Offer               String
  security            String
  maintenance         String
  totalPG             Int
  ageofProperty       String
  waterSupply         String
  PGType              String
  bedCount            Int
  powerBackup         String
  noticePeriod        String
  furnishingType      String
  accomoType          String
  foodAvailable       Boolean
  parking             String[]
  preferTenants       String[]
  genderPrefer        String
  timeRestrict        Boolean
  PGInside            String[]
  PGOutside           String[]
  careTaker           String
  listingShowNo       String
  isVerified          Boolean  @default(false)
  verificationPending Boolean  @default(true)
  paymentDone         Boolean  @default(false)
  isVisible           Boolean  @default(true)
  owner               Owner    @relation(fields: [ownerId], references: [id])
}

model RoomInfo {
  id                  Int      @id @default(autoincrement())
  ownerId             Int
  Type                String   @default("Room")
  city                String
  townSector          String
  location            String
  BHK                 String
  landmark            String
  MinPrice            String
  MaxPrice            String
  Offer               String
  adress              String
  security            String
  maintenance         String
  totalRoom           Int
  ageofProperty       String
  powerBackup         String
  noticePeriod        String
  waterSupply         String
  furnishingType      String
  accomoType          String
  parking             String[]
  preferTenants       String[]
  genderPrefer        String
  roomType            String
  roomInside          String[]
  roomOutside         String[]
  careTaker           String
  listingShowNo       String
  RoomAvailable       String
  isVerified          Boolean  @default(false)
  verificationPending Boolean  @default(true)
  paymentDone         Boolean  @default(false)
  isVisible           Boolean  @default(true)
  owner               Owner    @relation(fields: [ownerId], references: [id])
}

model ContactLog {
  id            Int      @id @default(autoincrement())
  ownerId       Int
  userId        Int
  listingId     Int
  customerName  String
  customerPhone String
  ownerPhone    String
  adress        String
  accessDate    DateTime
  expiryDate    DateTime
  propertyType  String
  isExpired     Boolean  @default(false)
  ownerName     String
  owner         Owner    @relation(fields: [ownerId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id               String     @id @default(uuid())
  listingType      String
  agentId          String?
  status           String     @default("Pending")
  createdAt        DateTime   @default(now())
  ownerId          Int
  verificationType VerifyType @default(SELF)
  listingId        Int
  agent            Agent?     @relation(fields: [agentId], references: [agentId])
  owner            Owner      @relation(fields: [ownerId], references: [id])

  @@index([agentId])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  listingId Int
  type      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Admin {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  role     Role    @default(EMPLOYEE)
  verified Boolean @default(false)
  username String
}

enum Role {
  EMPLOYEE
  ADMIN
}

enum VerifyType {
  SELF
  AGENT
}
